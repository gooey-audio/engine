name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-binaries:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Rust library using Docker
        run: |
          # Build the Rust library using the existing Dockerfile
          docker build --target wasm-builder -t gooey-audio-engine-builder .
          
          # Extract the built library
          docker create --name temp-container gooey-audio-engine-builder
          docker cp temp-container:/wasm-output ./wasm-output
          docker rm temp-container

      - name: Build native library
        run: |
          # Use the same Rust version as Dockerfile
          docker run --rm -v $(pwd):/app -w /app/lib rust:1.87 cargo build --release

      - name: Create release directory structure
        run: |
          mkdir -p release
          mkdir -p release/wasm
          mkdir -p release/native
          mkdir -p release/headers
          
          # Copy WASM files
          cp -r wasm-output/* release/wasm/
          
          # Copy native library
          cp lib/target/release/libgooey_audio_engine.* release/native/ 2>/dev/null || true
          
          # Generate and copy headers
          cd lib
          cargo doc --no-deps
          cp -r target/doc release/docs

      - name: Create release archive
        run: |
          tar -czf gooey-audio-engine-${GITHUB_REF#refs/tags/}.tar.gz -C release .

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Gooey Audio Engine Binary Release
            
            ## Contents
            
            This release contains the compiled Gooey Audio Engine library for multiple targets:
            
            ### WASM (Web)
            - `wasm/` - WebAssembly build for web applications
            - Includes JavaScript bindings and WASM binary
            
            ### Native
            - `native/` - Native library build for desktop applications
            - Static library for linking into native applications
            
            ### Documentation
            - `docs/` - Generated API documentation
            
            ## Usage
            
            ### Web Integration
            ```javascript
            import init, { WasmOscillator } from './wasm/gooey_audio_engine.js';
            await init();
            
            const oscillator = new WasmOscillator(44100, 440);
            oscillator.trigger(0);
            ```
            
            ### Native Integration
            Link against the static library in `native/` and use the C API.
            
            ## Build Environment
            
            Built using the same Docker environment as the deployment pipeline:
            - Rust 1.87
            - wasm-pack for WASM compilation
            - CPAL for native audio backend
            
            ## Version
            ${GITHUB_REF#refs/tags/}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./gooey-audio-engine-${GITHUB_REF#refs/tags/}.tar.gz
          asset_name: gooey-audio-engine-${GITHUB_REF#refs/tags/}.tar.gz
          asset_content_type: application/gzip 